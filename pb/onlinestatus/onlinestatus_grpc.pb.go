// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: onlinestatus/onlinestatus.proto

package onlinestatuspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TripServiceClient is the client API for TripService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripServiceClient interface {
	SendTripData(ctx context.Context, opts ...grpc.CallOption) (TripService_SendTripDataClient, error)
}

type tripServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripServiceClient(cc grpc.ClientConnInterface) TripServiceClient {
	return &tripServiceClient{cc}
}

func (c *tripServiceClient) SendTripData(ctx context.Context, opts ...grpc.CallOption) (TripService_SendTripDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &TripService_ServiceDesc.Streams[0], "/onlinestatus.TripService/SendTripData", opts...)
	if err != nil {
		return nil, err
	}
	x := &tripServiceSendTripDataClient{stream}
	return x, nil
}

type TripService_SendTripDataClient interface {
	Send(*TripDataRequest) error
	Recv() (*TripSummaryResponse, error)
	grpc.ClientStream
}

type tripServiceSendTripDataClient struct {
	grpc.ClientStream
}

func (x *tripServiceSendTripDataClient) Send(m *TripDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tripServiceSendTripDataClient) Recv() (*TripSummaryResponse, error) {
	m := new(TripSummaryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TripServiceServer is the server API for TripService service.
// All implementations must embed UnimplementedTripServiceServer
// for forward compatibility
type TripServiceServer interface {
	SendTripData(TripService_SendTripDataServer) error
	mustEmbedUnimplementedTripServiceServer()
}

// UnimplementedTripServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTripServiceServer struct {
}

func (UnimplementedTripServiceServer) SendTripData(TripService_SendTripDataServer) error {
	return status.Errorf(codes.Unimplemented, "method SendTripData not implemented")
}
func (UnimplementedTripServiceServer) mustEmbedUnimplementedTripServiceServer() {}

// UnsafeTripServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripServiceServer will
// result in compilation errors.
type UnsafeTripServiceServer interface {
	mustEmbedUnimplementedTripServiceServer()
}

func RegisterTripServiceServer(s grpc.ServiceRegistrar, srv TripServiceServer) {
	s.RegisterService(&TripService_ServiceDesc, srv)
}

func _TripService_SendTripData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TripServiceServer).SendTripData(&tripServiceSendTripDataServer{stream})
}

type TripService_SendTripDataServer interface {
	Send(*TripSummaryResponse) error
	Recv() (*TripDataRequest, error)
	grpc.ServerStream
}

type tripServiceSendTripDataServer struct {
	grpc.ServerStream
}

func (x *tripServiceSendTripDataServer) Send(m *TripSummaryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tripServiceSendTripDataServer) Recv() (*TripDataRequest, error) {
	m := new(TripDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TripService_ServiceDesc is the grpc.ServiceDesc for TripService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onlinestatus.TripService",
	HandlerType: (*TripServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendTripData",
			Handler:       _TripService_SendTripData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "onlinestatus/onlinestatus.proto",
}

// UserStatusServiceClient is the client API for UserStatusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserStatusServiceClient interface {
	GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (UserStatusService_GetUserStatusClient, error)
}

type userStatusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserStatusServiceClient(cc grpc.ClientConnInterface) UserStatusServiceClient {
	return &userStatusServiceClient{cc}
}

func (c *userStatusServiceClient) GetUserStatus(ctx context.Context, in *UserStatusRequest, opts ...grpc.CallOption) (UserStatusService_GetUserStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserStatusService_ServiceDesc.Streams[0], "/onlinestatus.UserStatusService/GetUserStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &userStatusServiceGetUserStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UserStatusService_GetUserStatusClient interface {
	Recv() (*UserStatusResponse, error)
	grpc.ClientStream
}

type userStatusServiceGetUserStatusClient struct {
	grpc.ClientStream
}

func (x *userStatusServiceGetUserStatusClient) Recv() (*UserStatusResponse, error) {
	m := new(UserStatusResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserStatusServiceServer is the server API for UserStatusService service.
// All implementations must embed UnimplementedUserStatusServiceServer
// for forward compatibility
type UserStatusServiceServer interface {
	GetUserStatus(*UserStatusRequest, UserStatusService_GetUserStatusServer) error
	mustEmbedUnimplementedUserStatusServiceServer()
}

// UnimplementedUserStatusServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserStatusServiceServer struct {
}

func (UnimplementedUserStatusServiceServer) GetUserStatus(*UserStatusRequest, UserStatusService_GetUserStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserStatus not implemented")
}
func (UnimplementedUserStatusServiceServer) mustEmbedUnimplementedUserStatusServiceServer() {}

// UnsafeUserStatusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserStatusServiceServer will
// result in compilation errors.
type UnsafeUserStatusServiceServer interface {
	mustEmbedUnimplementedUserStatusServiceServer()
}

func RegisterUserStatusServiceServer(s grpc.ServiceRegistrar, srv UserStatusServiceServer) {
	s.RegisterService(&UserStatusService_ServiceDesc, srv)
}

func _UserStatusService_GetUserStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserStatusServiceServer).GetUserStatus(m, &userStatusServiceGetUserStatusServer{stream})
}

type UserStatusService_GetUserStatusServer interface {
	Send(*UserStatusResponse) error
	grpc.ServerStream
}

type userStatusServiceGetUserStatusServer struct {
	grpc.ServerStream
}

func (x *userStatusServiceGetUserStatusServer) Send(m *UserStatusResponse) error {
	return x.ServerStream.SendMsg(m)
}

// UserStatusService_ServiceDesc is the grpc.ServiceDesc for UserStatusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserStatusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onlinestatus.UserStatusService",
	HandlerType: (*UserStatusServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUserStatus",
			Handler:       _UserStatusService_GetUserStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onlinestatus/onlinestatus.proto",
}

// PartyServiceClient is the client API for PartyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PartyServiceClient interface {
	GetPartyMembers(ctx context.Context, in *PartyMembersRequest, opts ...grpc.CallOption) (PartyService_GetPartyMembersClient, error)
}

type partyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPartyServiceClient(cc grpc.ClientConnInterface) PartyServiceClient {
	return &partyServiceClient{cc}
}

func (c *partyServiceClient) GetPartyMembers(ctx context.Context, in *PartyMembersRequest, opts ...grpc.CallOption) (PartyService_GetPartyMembersClient, error) {
	stream, err := c.cc.NewStream(ctx, &PartyService_ServiceDesc.Streams[0], "/onlinestatus.PartyService/GetPartyMembers", opts...)
	if err != nil {
		return nil, err
	}
	x := &partyServiceGetPartyMembersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PartyService_GetPartyMembersClient interface {
	Recv() (*PartyMembersResponse, error)
	grpc.ClientStream
}

type partyServiceGetPartyMembersClient struct {
	grpc.ClientStream
}

func (x *partyServiceGetPartyMembersClient) Recv() (*PartyMembersResponse, error) {
	m := new(PartyMembersResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PartyServiceServer is the server API for PartyService service.
// All implementations must embed UnimplementedPartyServiceServer
// for forward compatibility
type PartyServiceServer interface {
	GetPartyMembers(*PartyMembersRequest, PartyService_GetPartyMembersServer) error
	mustEmbedUnimplementedPartyServiceServer()
}

// UnimplementedPartyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPartyServiceServer struct {
}

func (UnimplementedPartyServiceServer) GetPartyMembers(*PartyMembersRequest, PartyService_GetPartyMembersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPartyMembers not implemented")
}
func (UnimplementedPartyServiceServer) mustEmbedUnimplementedPartyServiceServer() {}

// UnsafePartyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PartyServiceServer will
// result in compilation errors.
type UnsafePartyServiceServer interface {
	mustEmbedUnimplementedPartyServiceServer()
}

func RegisterPartyServiceServer(s grpc.ServiceRegistrar, srv PartyServiceServer) {
	s.RegisterService(&PartyService_ServiceDesc, srv)
}

func _PartyService_GetPartyMembers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PartyMembersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PartyServiceServer).GetPartyMembers(m, &partyServiceGetPartyMembersServer{stream})
}

type PartyService_GetPartyMembersServer interface {
	Send(*PartyMembersResponse) error
	grpc.ServerStream
}

type partyServiceGetPartyMembersServer struct {
	grpc.ServerStream
}

func (x *partyServiceGetPartyMembersServer) Send(m *PartyMembersResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PartyService_ServiceDesc is the grpc.ServiceDesc for PartyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PartyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "onlinestatus.PartyService",
	HandlerType: (*PartyServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPartyMembers",
			Handler:       _PartyService_GetPartyMembers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onlinestatus/onlinestatus.proto",
}
